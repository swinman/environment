snippet cstart "Template for New C File" !b
#line 2 "${1:`!p snip.rv = snip.fn[:-2]`}"
/**** file:       ${1:`!p snip.rv = snip.fn`}
    * created:    ${2:`!p import time
snip.rv = time.strftime("%Y-%m-%d %H:%M:%S")
`}
    * author:     ${3:Lucid Scientific}
    */

/*___ I N C L U D E S ______________________________________________________*/
#include "${4:`!p snip.rv = snip.fn.rsplit('.',1)[0] + ".h"`}"

/*___ M A C R O S   ( P R I V A T E ) ______________________________________*/

/*___ T Y P E D E F S   ( P R I V A T E ) __________________________________*/

/*___ P R O T O T Y P E S   ( P R I V A T E ) ______________________________*/

/*___ V A R I A B L E S ____________________________________________________*/

/*___ I N T E R R U P T S  _________________________________________________*/

/*___ F U N C T I O N S   ( P R I V A T E ) ________________________________*/

/*___ F U N C T I O N S ____________________________________________________*/
${0}

endsnippet

snippet hstart "Template for new header file" !b
/**** file:       ${1:`!p snip.rv = snip.fn`}
    * created:    ${2:`!p import time
snip.rv = time.strftime("%Y-%m-%d %H:%M:%S")
  `}
    * author:     ${3:Lucid Scientific, Inc.}
    */

#ifndef __${4:`!p
if not snip.c:
    import string
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    snip.rv = '{0}'.format(name)
else:
    snip.rv = snip.c
`}__
#define __$4__

/*___ I N C L U D E S ______________________________________________________*/

/*___ M A C R O S __________________________________________________________*/

/*___ T Y P E D E F S ______________________________________________________*/

/*___ V A R I A B L E S ____________________________________________________*/

/*___ P R O T O T Y P E S __________________________________________________*/
${0}

#endif /* end of include guard: __$4__ */
endsnippet

snippet func "Function Dec and Function" !b
${2:void} ${1:function_name}(${3:void});
    /* @brief ${4:short description}
     * @param ${5:None}
     * @retrn ${6:None}
     */

$2 $1($3) {${0}
}
endsnippet


snippet hfunc "Function Dec and Function" !b
${2:void} ${1:function_name}(${3:void});
    /* @brief ${4:short description}
     * @param ${5:None}
     * @retrn ${6:None}
     */
endsnippet

snippet ifdef "Add #ifdef X #endif" !b
#ifdef ${1:UNDEFINED}
${VISUAL:
}
#endif        /* $1 */

endsnippet

snippet ifdevice "If the _DEVICE type is x" !b
#if ( _DEVICE == ${1:_STM32F4} )
${VISUAL: }
#endif        /* _DEVICE */
endsnippet

snippet rmwarn "If the _DEVICE type is x" !b
#if 0
${VISUAL: }
#else
#warning "FIXME ${1: error}"
#endif
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
    ${VISUAL}${0}
    return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    ${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    ${VISUAL}${0}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
    import random, string
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
    snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c
`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while (${1:/* condition */}) {
    ${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do {
    ${VISUAL}${0}
} while (${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
    ${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
    ${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
    ${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
    ${2}
} else {
    ${3:/* else */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
    ${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
    ${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

# vim:ft=snippets:
